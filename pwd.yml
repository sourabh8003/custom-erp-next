version: "3"

services:
  backend:
    image: frappe-ssingh-v1
    networks:
      - frappe_network
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
      # - /d/docker-backups:/home/frappe/backups #Add this while restoring site
    environment:
      DB_HOST: db
      DB_PORT: "3306"
      MYSQL_ROOT_PASSWORD: admin
      MARIADB_ROOT_PASSWORD: admin

  configurator:
    image: frappe-ssingh-v1
    networks:
      - frappe_network
    deploy:
      restart_policy:
        condition: none
    entrypoint:
      - bash
      - -c
    command:
      - >
        ls -1 apps > sites/apps.txt;
        bench set-config -g db_host $$DB_HOST;
        bench set-config -gp db_port $$DB_PORT;
        bench set-config -g redis_cache "redis://$$REDIS_CACHE";
        bench set-config -g redis_queue "redis://$$REDIS_QUEUE";
        bench set-config -g redis_socketio "redis://$$REDIS_QUEUE";
        bench set-config -gp socketio_port $$SOCKETIO_PORT;
    environment:
      DB_HOST: db
      DB_PORT: "3306"
      REDIS_CACHE: redis-cache:6379
      REDIS_QUEUE: redis-queue:6379
      SOCKETIO_PORT: "9000"
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  create-site:
    image: frappe-ssingh-v1
    networks:
      - frappe_network
    deploy:
      restart_policy:
        condition: none
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    entrypoint:
      - bash
      - -c
    command:
      - >
        wait-for-it -t 120 db:3306;
        wait-for-it -t 120 redis-cache:6379;
        wait-for-it -t 120 redis-queue:6379;
        export start=`date +%s`;
        until [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".db_host // empty"` ]] && \
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_cache // empty"` ]] && \
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_queue // empty"` ]];
        do
          echo "Waiting for sites/common_site_config.json to be created";
          sleep 5;
          if (( `date +%s`-start > 120 )); then
            echo "could not find sites/common_site_config.json with required keys";
            exit 1
          fi
        done;
        echo "sites/common_site_config.json found";
        bench new-site --db-name=erpnext_db_1 --mariadb-user-host-login-scope='%' --admin-password=admin --db-root-username=root --db-root-password=admin --install-app erpnext --install-app india_compliance --set-default frontend;

  db:
    image: mariadb:10.6
    networks:
      - frappe_network
    healthcheck:
      test: mysqladmin ping -h localhost --password=admin
      interval: 1s
      retries: 20
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
      - --skip-innodb-read-only-compressed # Temporary fix for MariaDB 10.6
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MARIADB_ROOT_PASSWORD: admin
    ports:
      - "3306:3306"
    volumes:
      - /d/docker-data/mariadb:/var/lib/mysql

  frontend:
    image: frappe-ssingh-v1
    networks:
      - frappe_network
    depends_on:
      - websocket
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - nginx-entrypoint.sh
    environment:
      BACKEND: backend:8000
      FRAPPE_SITE_NAME_HEADER: frontend
      SOCKETIO: websocket:9000
      UPSTREAM_REAL_IP_ADDRESS: 127.0.0.1
      UPSTREAM_REAL_IP_HEADER: X-Forwarded-For
      UPSTREAM_REAL_IP_RECURSIVE: "off"
      PROXY_READ_TIMEOUT: 120
      CLIENT_MAX_BODY_SIZE: 50m
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    ports:
      - "8080:8080"

  queue-long:
    image: frappe-ssingh-v1
    networks:
      - frappe_network
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - bench
      - worker
      - --queue
      - long,default,short
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  queue-short:
    image: frappe-ssingh-v1
    networks:
      - frappe_network
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - bench
      - worker
      - --queue
      - short,default
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  redis-queue:
    image: redis:6.2-alpine
    networks:
      - frappe_network
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - redis-queue-data:/data

  redis-cache:
    image: redis:6.2-alpine
    networks:
      - frappe_network
    deploy:
      restart_policy:
        condition: on-failure

  scheduler:
    image: frappe-ssingh-v1
    networks:
      - frappe_network
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - bench
      - schedule
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  websocket:
    image: frappe-ssingh-v1
    networks:
      - frappe_network
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  backup:
    image: frappe-ssingh-v1
    networks:
      - frappe_network
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - /d/docker-backups:/home/frappe/backups
    environment:
      - BACKUP_RETENTION_COUNT=15
      - BACKUP_INTERVAL=300  # 24 hours
    command: >
      bash -c '
        BACKUP_ROOT="/home/frappe/backups"
        BENCH_PATH="/home/frappe/frappe-bench"
        LOG_FILE="$$BACKUP_ROOT/backup.log"
        BACKUP_INTERVAL="${BACKUP_INTERVAL:-300}"
        RETENTION_COUNT="${BACKUP_RETENTION_COUNT:-15}"

        mkdir -p "$$BACKUP_ROOT"
        cd "$$BENCH_PATH"

        echo "[$$(date)] Backup service started - Interval: $$BACKUP_INTERVAL sec, Retention: $$RETENTION_COUNT" | tee -a "$$LOG_FILE"

        while true; do
          # Rotate log if > 5MB
          if [ -f "$$LOG_FILE" ] && [ "$$(stat -c%s "$$LOG_FILE")" -gt 5242880 ]; then
            mv "$$LOG_FILE" "$$LOG_FILE.old"
            touch "$$LOG_FILE"
          fi

          echo "[$$(date)] Starting backup..." | tee -a "$$LOG_FILE"
          TIMESTAMP=$$(date +%Y%m%d_%H%M%S 2>/dev/null || echo "backup_$$$$")
          BACKUP_DIR="$$BACKUP_ROOT/backup_$$TIMESTAMP"
          mkdir -p "$$BACKUP_DIR"

          # Backup all sites with files
          if bench --site all backup --with-files --backup-path "$$BACKUP_DIR" >> "$$LOG_FILE" 2>&1; then
            echo "[$$(date)] ✓ Database + file backup successful" | tee -a "$$LOG_FILE"
          else
            echo "[$$(date)] ✗ Backup command failed" | tee -a "$$LOG_FILE"
          fi

          # Backup codebase (custom apps + config)
          tar -czf "$$BACKUP_DIR/codebase.tar.gz" -C /home/frappe frappe-bench/apps frappe-bench/config >> "$$LOG_FILE" 2>&1

          # Verify existence of DB dump(s)
          if ls "$$BACKUP_DIR"/*.sql.gz >/dev/null 2>&1; then
            echo "[$$(date)] ✓ Backup verified" | tee -a "$$LOG_FILE"
            touch "$$BACKUP_DIR/.success"
            echo "[$$(date)] Last successful backup: $$TIMESTAMP" > "$$BACKUP_ROOT/last_success.txt"
          else
            echo "[$$(date)] ✗ Backup verification failed — no .sql.gz found" | tee -a "$$LOG_FILE"
            touch "$$BACKUP_DIR/.failed"
          fi

          # Optional: Create a compressed tar.gz of the whole backup folder
          # Uncomment the lines below to enable it
          # tar -czf "$$BACKUP_ROOT/backup_$$TIMESTAMP.tar.gz" -C "$$BACKUP_ROOT" "backup_$$TIMESTAMP"
          # rm -rf "$$BACKUP_DIR"

          # Delete old successful backups if count exceeds retention
          # Only count and manage successful backups (those with .success file)
          SUCCESSFUL_BACKUPS=$$(find "$$BACKUP_ROOT" -name "backup_*" -type d -exec test -f "{}/.success" \; -print 2>/dev/null | wc -l)
          if [ "$$SUCCESSFUL_BACKUPS" -gt "$$RETENTION_COUNT" ]; then
            DELETE_COUNT=$$((SUCCESSFUL_BACKUPS - RETENTION_COUNT))
            echo "[$$(date)] Found $$SUCCESSFUL_BACKUPS successful backups, removing $$DELETE_COUNT oldest ones..." | tee -a "$$LOG_FILE"
            # Get successful backup directories sorted by modification time (oldest first)
            find "$$BACKUP_ROOT" -name "backup_*" -type d -exec test -f "{}/.success" \; -print 2>/dev/null | \
              xargs ls -1dt | tail -n "$$DELETE_COUNT" | xargs rm -rf
          fi

          echo "[$$(date)] Next backup in $$BACKUP_INTERVAL seconds" | tee -a "$$LOG_FILE"
          echo "" >> "$$LOG_FILE"

          sleep "$$BACKUP_INTERVAL"
        done
      '

  
volumes:
  redis-queue-data:
  sites:
  logs:

networks:
  frappe_network:
    driver: bridge
